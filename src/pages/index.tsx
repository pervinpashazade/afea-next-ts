import { useEffect, useState } from 'react'
import Head from 'next/head'
import ReactPaginate from 'react-paginate'
import { useRouter } from "next/router";
import {
  Input,
  Label,
  Button,
} from 'reactstrap';
import { config } from '../config';
import axios from 'axios';

interface IPageProps {
  products: Array<{}>,
  page: number,
  total: number,
  page_count: number,
  not_found?: boolean,
  isLoading: boolean,
}

export default function Home(props: IPageProps) {

  console.log("props", props);

  const router = useRouter();

  const {
    products,
    page,
    total,
    page_count,
    not_found,
    isLoading,
  } = props;

  useEffect(() => {
    getCategoryList();
  }, []);

  const getCategoryList = () => {
    axios.get(`${config.apiUrl}/products/categories`)
      .then((response) => {
        setCategoryList(response.data);
      })
      .catch((error) => {
        console.log("error", error);
      })
  }

  useEffect(() => {
    setProductList(props.products);
  }, [props]);

  const [loadData, setLoadData] = useState(false);
  const [productList, setProductList] = useState<any>([]);
  const [search, setSearch] = useState('');
  const [categoryList, setCategoryList] = useState([]);

  const handleChange = (data: any) => {
    // setLoadData(true);
    router.push(`/?page=${data.selected + 1}`);
  }

  const searchData = () => {
    setLoadData(true);

  }

  const handleFilterChange = (e: any) => {
    axios.get(`${config.apiUrl}/products?category=${e.target.value}`)
      .then((response) => {
        setProductList(response.data);
      })
      .catch((error) => {
        console.log("error", error);
      })
  }

  return (
    <>
      <Head>
        <title>Afea Group Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="container">
          <nav className="navbar navbar-light bg-light">
            <a className="navbar-brand" href="#">
              AFEA Group
            </a>
          </nav>
        </div>
        <div className="my-5"></div>
        <div className="container">
          <div className="row">
            <div className="col-12">
              <h2>Products</h2>
            </div>
          </div>
          <div className="row">
            <div className="col-12 col-md-4 mb-4">
              <Label for='price'>Category</Label>
              <Input
                id='price'
                type="select"
                name='price'
                placeholder='Select Category'
                onChange={(e) => handleFilterChange(e)}
              >
                <option hidden value="">Select Category</option>
                {
                  categoryList?.length > 0 &&
                  categoryList.map((category: any, index: number) => {
                    return (
                      <option key={index} value={category}>{category}</option>
                    )
                  })
                }
              </Input>
            </div>
            <div className="col-12 ">
              <div className="w-100 d-flex justify-content-end">
                <Button
                  color='primary'
                  onClick={searchData}
                >
                  Search
                </Button>
              </div>
            </div>
          </div>
          <div className="my-5"></div>
          <div className="row">
            <div className="col-12">
              {
                loadData ? (
                  <div className="spinner-border text-primary" role="status">
                    <span className="visually-hidden">Loading...</span>
                  </div>
                ) : (
                  <>
                    <table className="table">
                      <thead>
                        <tr>
                          <th scope="col">#</th>
                          <th scope="col">Title</th>
                          <th scope="col">Category</th>
                          <th scope="col">Rating</th>
                          <th scope="col">Price</th>
                          <th scope="col">Discunt</th>
                        </tr>
                      </thead>
                      <tbody>
                        {
                          productList?.length > 0 &&
                          productList.map((product: any, index: number) => {
                            return (
                              <tr key={index}>
                                <th scope="row">{product.id}</th>
                                <td>{product.title}</td>
                                <td>{product.category}</td>
                                <td>{product.rating}</td>
                                <td>{product.price}</td>
                                <td>{product.discountPercentage} %</td>
                              </tr>
                            )
                          })
                        }
                      </tbody>
                    </table>
                    <ReactPaginate
                      previousLabel="Previous"
                      nextLabel="Next"
                      breakLabel="..."
                      pageCount={page_count}
                      marginPagesDisplayed={2}
                      pageRangeDisplayed={3}
                      onPageChange={handleChange}
                      containerClassName="pagination"
                      pageClassName="page-link"
                      previousClassName="page-link"
                      nextClassName="page-item"
                      nextLinkClassName="page-link"
                      breakClassName="page-item"
                      breakLinkClassName='page-link'
                      activeClassName='active'
                    // forcePage={pagination.selected_page}
                    />
                  </>
                )
              }
            </div>
          </div>
        </div>
      </main>
    </>
  )
}

export const getServerSideProps = async (context: any) => {
  const page = context.query?.page ? Number(context.query.page) : 1;
  const rows = 10;

  const data = await fetch(`${config.apiUrl}/products?limit=${rows}&skip=${page}`)
    .then(res => {
      return res.json()
    })
    .catch(err => {
      console.log("err", err);
    })

  console.log("data", data);


  const pagesCount = Math.ceil(data.total / rows);

  if (!data) {
    return {
      props: {
        products: [],
        page,
        total: 0,
        not_found: true,
        isLoading: false,
      }
    }
  }

  return {
    props: {
      products: data.products,
      page,
      total: data.total,
      page_count: pagesCount,
      not_found: false,
      isLoading: false,
    }
  }
};